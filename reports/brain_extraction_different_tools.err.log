Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/ubuntu/.local/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/.local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 172, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/ubuntu/.local/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/.local/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
edge_imgs = [ants_edges, bet_edges, afni_edges, synth_edges]
labels = ['ANTS', 'FSL', 'AFNI', 'FreeSurfer']
colors = ['#FF0000', '#0000FF', '#00FF00', '#FFA500']

create_combined_plot(edge_imgs, labels, colors, input_image, "Brain Extraction Method Comparison")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[31], line 5[0m
[1;32m      2[0m labels [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mANTS[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mFSL[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mAFNI[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mFreeSurfer[39m[38;5;124m'[39m]
[1;32m      3[0m colors [38;5;241m=[39m [[38;5;124m'[39m[38;5;124m#FF0000[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m#0000FF[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m#00FF00[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m#FFA500[39m[38;5;124m'[39m]
[0;32m----> 5[0m [43mcreate_combined_plot[49m[43m([49m[43medge_imgs[49m[43m,[49m[43m [49m[43mlabels[49m[43m,[49m[43m [49m[43mcolors[49m[43m,[49m[43m [49m[43minput_image[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mBrain Extraction Method Comparison[39;49m[38;5;124;43m"[39;49m[43m)[49m

Cell [0;32mIn[28], line 53[0m, in [0;36mcreate_combined_plot[0;34m(edge_imgs, labels, colors, bg_img, title)[0m
[1;32m     50[0m custom_cmap [38;5;241m=[39m ListedColormap(colors)  [38;5;66;03m# Just use your edge colors directly[39;00m
[1;32m     52[0m fig [38;5;241m=[39m plt[38;5;241m.[39mfigure(figsize[38;5;241m=[39m([38;5;241m14[39m, [38;5;241m8[39m))
[0;32m---> 53[0m [43mplotting[49m[38;5;241;43m.[39;49m[43mplot_stat_map[49m[43m([49m[43mcombined_img[49m[43m,[49m[43m [49m[43mbg_img[49m[38;5;241;43m=[39;49m[43mbg_img[49m[43m,[49m
[1;32m     54[0m [43m                      [49m[43mcmap[49m[38;5;241;43m=[39;49m[43mcustom_cmap[49m[43m,[49m
[1;32m     55[0m [43m                      [49m[43malpha[49m[38;5;241;43m=[39;49m[38;5;241;43m0.8[39;49m[43m,[49m[43m [49m
[1;32m     56[0m [43m                      [49m[43mdim[49m[38;5;241;43m=[39;49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m,[49m
[1;32m     57[0m [43m                      [49m[43mthreshold[49m[38;5;241;43m=[39;49m[38;5;241;43m0.5[39;49m[43m,[49m[43m  [49m[38;5;66;43;03m# Only show actual edge values[39;49;00m
[1;32m     58[0m [43m                      [49m[43mtitle[49m[38;5;241;43m=[39;49m[43mtitle[49m[43m,[49m
[1;32m     59[0m [43m                      [49m[43mcolorbar[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[1;32m     60[0m [43m                      [49m[43mvmin[49m[38;5;241;43m=[39;49m[38;5;241;43m1[39;49m[43m,[49m
[1;32m     61[0m [43m                      [49m[43mvmax[49m[38;5;241;43m=[39;49m[38;5;28;43mlen[39;49m[43m([49m[43medge_imgs[49m[43m)[49m[43m)[49m  [38;5;66;03m# 4 edge images = values 1-4[39;00m
[1;32m     63[0m [38;5;66;03m# Add legend[39;00m
[1;32m     64[0m legend_elements [38;5;241m=[39m [mpatches[38;5;241m.[39mPatch(color[38;5;241m=[39mcolors[i], label[38;5;241m=[39mlabels[i]) 
[1;32m     65[0m                   [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mlen[39m(labels))]

File [0;32m~/.local/lib/python3.10/site-packages/nilearn/plotting/img_plotting.py:977[0m, in [0;36mplot_stat_map[0;34m(stat_map_img, bg_img, cut_coords, output_file, display_mode, colorbar, cbar_tick_format, figure, axes, title, threshold, annotate, draw_cross, black_bg, cmap, symmetric_cbar, dim, vmin, vmax, radiological, resampling_interpolation, **kwargs)[0m
[1;32m    972[0m bg_img, black_bg, bg_vmin, bg_vmax [38;5;241m=[39m _load_anat(bg_img, dim[38;5;241m=[39mdim,
[1;32m    973[0m                                                 black_bg[38;5;241m=[39mblack_bg)
[1;32m    975[0m stat_map_img [38;5;241m=[39m _utils[38;5;241m.[39mcheck_niimg_3d(stat_map_img, dtype[38;5;241m=[39m[38;5;124m'[39m[38;5;124mauto[39m[38;5;124m'[39m)
[0;32m--> 977[0m cbar_vmin, cbar_vmax, vmin, vmax [38;5;241m=[39m [43m_get_colorbar_and_data_ranges[49m[43m([49m
[1;32m    978[0m [43m    [49m[43m_safe_get_data[49m[43m([49m[43mstat_map_img[49m[43m,[49m[43m [49m[43mensure_finite[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m[43m,[49m
[1;32m    979[0m [43m    [49m[43mvmin[49m[38;5;241;43m=[39;49m[43mvmin[49m[43m,[49m
[1;32m    980[0m [43m    [49m[43mvmax[49m[38;5;241;43m=[39;49m[43mvmax[49m[43m,[49m
[1;32m    981[0m [43m    [49m[43msymmetric_cbar[49m[38;5;241;43m=[39;49m[43msymmetric_cbar[49m[43m)[49m
[1;32m    983[0m display [38;5;241m=[39m _plot_img_with_bg(
[1;32m    984[0m     img[38;5;241m=[39mstat_map_img, bg_img[38;5;241m=[39mbg_img, cut_coords[38;5;241m=[39mcut_coords,
[1;32m    985[0m     output_file[38;5;241m=[39moutput_file, display_mode[38;5;241m=[39mdisplay_mode,
[0;32m   (...)[0m
[1;32m    991[0m     resampling_interpolation[38;5;241m=[39mresampling_interpolation,
[1;32m    992[0m     radiological[38;5;241m=[39mradiological, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m    994[0m [38;5;28;01mreturn[39;00m display

File [0;32m~/.local/lib/python3.10/site-packages/nilearn/plotting/img_plotting.py:77[0m, in [0;36m_get_colorbar_and_data_ranges[0;34m(stat_map_data, vmin, vmax, symmetric_cbar, force_min_stat_map_value, symmetric_data_range)[0m
[1;32m     67[0m [38;5;124;03m"""Set colormap and colorbar limits.[39;00m
[1;32m     68[0m 
[1;32m     69[0m [38;5;124;03mUsed by plot_stat_map, plot_glass_brain and plot_img_on_surf.[39;00m
[0;32m   (...)[0m
[1;32m     74[0m [38;5;124;03mplot_stat_map.[39;00m
[1;32m     75[0m [38;5;124;03m"""[39;00m
[1;32m     76[0m [38;5;28;01mif[39;00m symmetric_data_range [38;5;129;01mand[39;00m (vmin [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m):
[0;32m---> 77[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m'[39m[38;5;124mthis function does not accept a [39m[38;5;124m"[39m[38;5;124mvmin[39m[38;5;124m"[39m[38;5;124m [39m[38;5;124m'[39m
[1;32m     78[0m                      [38;5;124m'[39m[38;5;124margument, as it uses a symmetrical range [39m[38;5;124m'[39m
[1;32m     79[0m                      [38;5;124m'[39m[38;5;124mdefined via the vmax argument. To threshold [39m[38;5;124m'[39m
[1;32m     80[0m                      [38;5;124m'[39m[38;5;124mthe plotted map, use the [39m[38;5;124m"[39m[38;5;124mthreshold[39m[38;5;124m"[39m[38;5;124m argument[39m[38;5;124m'[39m)
[1;32m     82[0m [38;5;66;03m# avoid dealing with masked_array:[39;00m
[1;32m     83[0m [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(stat_map_data, [38;5;124m'[39m[38;5;124m_mask[39m[38;5;124m'[39m):

[0;31mValueError[0m: this function does not accept a "vmin" argument, as it uses a symmetrical range defined via the vmax argument. To threshold the plotted map, use the "threshold" argument

