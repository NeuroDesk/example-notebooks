Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#extract first volume of functional images
index_img("./ds000102/sub-08/func/sub-08_task-flanker_run-1_bold.nii.gz", 0).to_filename("./FSL_preproc/sub-08_task-flanker_run-1_bold_vol0.nii.gz")
index_img("./ds000102/sub-08/func/sub-08_task-flanker_run-2_bold.nii.gz", 0).to_filename("./FSL_preproc/sub-08_task-flanker_run-2_bold_vol0.nii.gz")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[8], line 2[0m
[1;32m      1[0m [38;5;66;03m#extract first volume of functional images[39;00m
[0;32m----> 2[0m [43mindex_img[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43m./ds000102/sub-08/func/sub-08_task-flanker_run-1_bold.nii.gz[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;241;43m0[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mto_filename[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43m./FSL_preproc/sub-08_task-flanker_run-1_bold_vol0.nii.gz[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m      3[0m index_img([38;5;124m"[39m[38;5;124m./ds000102/sub-08/func/sub-08_task-flanker_run-2_bold.nii.gz[39m[38;5;124m"[39m, [38;5;241m0[39m)[38;5;241m.[39mto_filename([38;5;124m"[39m[38;5;124m./FSL_preproc/sub-08_task-flanker_run-2_bold_vol0.nii.gz[39m[38;5;124m"[39m)

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/filebasedimages.py:308[0m, in [0;36mFileBasedImage.to_filename[0;34m(self, filename, **kwargs)[0m
[1;32m    292[0m [38;5;250m[39m[38;5;124mr[39m[38;5;124;03m"""Write image to files implied by filename string[39;00m
[1;32m    293[0m 
[1;32m    294[0m [38;5;124;03mParameters[39;00m
[0;32m   (...)[0m
[1;32m    305[0m [38;5;124;03mNone[39;00m
[1;32m    306[0m [38;5;124;03m"""[39;00m
[1;32m    307[0m [38;5;28mself[39m[38;5;241m.[39mfile_map [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mfilespec_to_file_map(filename)
[0;32m--> 308[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mto_file_map[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/nifti1.py:2377[0m, in [0;36mNifti1Pair.to_file_map[0;34m(self, file_map, dtype)[0m
[1;32m   2375[0m [38;5;28mself[39m[38;5;241m.[39mget_data_dtype(finalize[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m   2376[0m [38;5;28;01mtry[39;00m:
[0;32m-> 2377[0m     [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mto_file_map[49m[43m([49m[43mfile_map[49m[43m,[49m[43m [49m[43mdtype[49m[43m)[49m
[1;32m   2378[0m [38;5;28;01mfinally[39;00m:
[1;32m   2379[0m     [38;5;28mself[39m[38;5;241m.[39mset_data_dtype(img_dtype)

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/analyze.py:1040[0m, in [0;36mAnalyzeImage.to_file_map[0;34m(self, file_map, dtype)[0m
[1;32m   1036[0m [38;5;66;03m# Check if hdr and img refer to same file; this can happen with odd[39;00m
[1;32m   1037[0m [38;5;66;03m# analyze images but most often this is because it's a single nifti[39;00m
[1;32m   1038[0m [38;5;66;03m# file[39;00m
[1;32m   1039[0m hdr_img_same [38;5;241m=[39m hdr_fh[38;5;241m.[39msame_file_as(img_fh)
[0;32m-> 1040[0m hdrf [38;5;241m=[39m [43mhdr_fh[49m[38;5;241;43m.[39;49m[43mget_prepare_fileobj[49m[43m([49m[43mmode[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mwb[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m   1041[0m [38;5;28;01mif[39;00m hdr_img_same:
[1;32m   1042[0m     imgf [38;5;241m=[39m hdrf

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/fileholders.py:77[0m, in [0;36mFileHolder.get_prepare_fileobj[0;34m(self, *args, **kwargs)[0m
[1;32m     75[0m     obj[38;5;241m.[39mseek([38;5;28mself[39m[38;5;241m.[39mpos)
[1;32m     76[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39mfilename [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 77[0m     obj [38;5;241m=[39m [43mImageOpener[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfilename[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     78[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mpos [38;5;241m!=[39m [38;5;241m0[39m:
[1;32m     79[0m         obj[38;5;241m.[39mseek([38;5;28mself[39m[38;5;241m.[39mpos)

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/openers.py:181[0m, in [0;36mOpener.__init__[0;34m(self, fileish, *args, **kwargs)[0m
[1;32m    178[0m [38;5;66;03m# Clear keep_open hint if it is not relevant for the file type[39;00m
[1;32m    179[0m [38;5;28;01melse[39;00m:
[1;32m    180[0m     kwargs[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mkeep_open[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[0;32m--> 181[0m [38;5;28mself[39m[38;5;241m.[39mfobj [38;5;241m=[39m [43mopener[49m[43m([49m[43mfileish[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    182[0m [38;5;28mself[39m[38;5;241m.[39m_name [38;5;241m=[39m fileish
[1;32m    183[0m [38;5;28mself[39m[38;5;241m.[39mme_opened [38;5;241m=[39m [38;5;28;01mTrue[39;00m

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/openers.py:89[0m, in [0;36m_gzip_open[0;34m(filename, mode, compresslevel, mtime, keep_open)[0m
[1;32m     81[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m_gzip_open[39m(
[1;32m     82[0m     filename: [38;5;28mstr[39m,
[1;32m     83[0m     mode: Mode [38;5;241m=[39m [38;5;124m'[39m[38;5;124mrb[39m[38;5;124m'[39m,
[0;32m   (...)[0m
[1;32m     86[0m     keep_open: [38;5;28mbool[39m [38;5;241m=[39m [38;5;28;01mFalse[39;00m,
[1;32m     87[0m ) [38;5;241m-[39m[38;5;241m>[39m gzip[38;5;241m.[39mGzipFile:
[1;32m     88[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m HAVE_INDEXED_GZIP [38;5;129;01mor[39;00m mode [38;5;241m!=[39m [38;5;124m'[39m[38;5;124mrb[39m[38;5;124m'[39m:
[0;32m---> 89[0m         gzip_file [38;5;241m=[39m [43mDeterministicGzipFile[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[43mmode[49m[43m,[49m[43m [49m[43mcompresslevel[49m[43m,[49m[43m [49m[43mmtime[49m[38;5;241;43m=[39;49m[43mmtime[49m[43m)[49m
[1;32m     91[0m     [38;5;66;03m# use indexed_gzip if possible for faster read access.  If keep_open ==[39;00m
[1;32m     92[0m     [38;5;66;03m# True, we tell IndexedGzipFile to keep the file handle open. Otherwise[39;00m
[1;32m     93[0m     [38;5;66;03m# the IndexedGzipFile will close/open the file on each read.[39;00m
[1;32m     94[0m     [38;5;28;01melse[39;00m:
[1;32m     95[0m         gzip_file [38;5;241m=[39m IndexedGzipFile(filename, drop_handles[38;5;241m=[39m[38;5;129;01mnot[39;00m keep_open)

File [0;32m~/.local/lib/python3.10/site-packages/nibabel/openers.py:71[0m, in [0;36mDeterministicGzipFile.__init__[0;34m(self, filename, mode, compresslevel, fileobj, mtime)[0m
[1;32m     69[0m         [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124m'[39m[38;5;124mMust define either fileobj or filename[39m[38;5;124m'[39m)
[1;32m     70[0m     [38;5;66;03m# Cast because GzipFile.myfileobj has type io.FileIO while open returns ty.IO[39;00m
[0;32m---> 71[0m     fileobj [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mmyfileobj [38;5;241m=[39m ty[38;5;241m.[39mcast(io[38;5;241m.[39mFileIO, [38;5;28;43mopen[39;49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[43mmodestr[49m[43m)[49m)
[1;32m     72[0m [38;5;28msuper[39m()[38;5;241m.[39m[38;5;21m__init__[39m(
[1;32m     73[0m     filename[38;5;241m=[39m[38;5;124m'[39m[38;5;124m'[39m,
[1;32m     74[0m     mode[38;5;241m=[39mmodestr,
[0;32m   (...)[0m
[1;32m     77[0m     mtime[38;5;241m=[39mmtime,
[1;32m     78[0m )

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'FSL_preproc/sub-08_task-flanker_run-1_bold_vol0.nii.gz'

